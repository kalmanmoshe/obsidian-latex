import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import inlineWorkerPlugin from "esbuild-plugin-inline-worker";
import { wasmLoader } from "esbuild-plugin-wasm";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

const args = {
  banner: {
    js: banner,
  },
  loader: { ".css": "css" },
  entryPoints: {
    main: "./src/main.ts",
    styles: "./src/styles.css",
  },
  bundle: true,
  external: [
    "obsidian",
    "electron",
    "@codemirror/autocomplete",
    "@codemirror/closebrackets",
    "@codemirror/collab",
    "@codemirror/commands",
    "@codemirror/comment",
    "@codemirror/fold",
    "@codemirror/gutter",
    "@codemirror/highlight",
    "@codemirror/history",
    "@codemirror/language",
    "@codemirror/lint",
    "@codemirror/matchbrackets",
    "@codemirror/panel",
    "@codemirror/rangeset",
    "@codemirror/rectangular-selection",
    "@codemirror/search",
    "@codemirror/state",
    "@codemirror/stream-parser",
    "@codemirror/text",
    "@codemirror/tooltip",
    "@codemirror/view",
    "@lezer/highlight",
    ...builtins,
  ],
  format: "cjs",
  target: "es2016",
  logLevel: "info",
  sourcemap: prod ? false : "inline",
  treeShaking: true,
  outdir: ".",
  entryNames: "[name]",
  assetNames: "[name]",
  platform: "node",
  plugins: [
    inlineWorkerPlugin({
      bundle: true,
      target: ["es2016"],
      platform: "node",
      format: "cjs",
      plugins: [wasmLoader({ mode: "embedded" })],
    }),
    wasmLoader({ mode: "embedded" }),
  ],
};

if (!prod && 1 === 2) {
  const ctx = await esbuild.context(args);
  ctx.watch().catch(() => process.exit(1));
} else {
  esbuild.build(args).catch(() => process.exit(1));
}
